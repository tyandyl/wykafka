1.Producer 继承Closeable
Closeable的作用：
在java.io.包下 InputStream，outputStream, Reader, Writer 等基类都实现了Closeable接口，
因为每次的IO操作结束之后都要去释放资源。
1： 如果在调用此方法之前 stream已经关闭 ，则方法失效；
2：建议先关闭内部的资源，并标记为已关闭；
3：优先抛出IO异常；

public interface Closeable extends AutoCloseable {
    public void close() throws IOException;
}

注：Closeable 继承 AutoCloseable

AutoCloseable接口位于java.lang包下，从JDK1.7开始引入。

1.在1.7之前，我们通过try{} finally{} 在finally中释放资源。

在finally中关闭资源存在以下问题：
1、自己要手动写代码做关闭的逻辑；
2、有时候还会忘记关闭一些资源；
3、关闭代码的逻辑比较冗长，不应该是正常的业务逻辑需要关注的；

2.对于实现AutoCloseable接口的类的实例，将其放到try后面（我们称之为：带资源的try语句），
在try结束的时候，会自动将这些资源关闭（调用close方法）。

带资源的try语句的3个关键点：
1、由带资源的try语句管理的资源必须是实现了AutoCloseable接口的类的对象。
2、在try代码中声明的资源被隐式声明为fianl。
3、通过使用分号分隔每个声明可以管理多个资源。

25         //JDK1.7之前,释放资源方式
26         FileInputStream fileInputStream = null;
27         try {
28             fileInputStream = new FileInputStream("");
29         } catch (FileNotFoundException e) {
30             e.printStackTrace();
31         } finally {
32             try {
33                 fileInputStream.close();
34             } catch (IOException e) {
35                 e.printStackTrace();
36             }
37         }


39         //1.7之后，只要实现了AutoCloseable接口
40         try (FileInputStream fileInputStream2 = new FileInputStream("")) {
41
42         } catch (FileNotFoundException e) {
43             e.printStackTrace();
44         } catch (IOException e) {
45             e.printStackTrace();
46         }


查看：AutoCloseableStudy类

查看：Unmodifiable类
unmodifiableMap,unmodifiableList,unmodifiableSet都是Collections的静态方法.
unmodifiable的中文意思是：不可更改，不可修改的

Collections.singletonMap("client-id", clientId)

Java中 Collections.shuffle()
顾名思义，shuffle是洗牌的意思，所以这个方法的作用是将list中的循序打乱，参数放入Lis

MetricConfig监控

AbstractQueuedSynchronizer